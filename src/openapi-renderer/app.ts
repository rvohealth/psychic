import fs from 'fs/promises'
import groupBy from 'lodash.groupby'
import path from 'path'
import EnvInternal from '../helpers/EnvInternal'
import openapiJsonPath from '../helpers/openapiJsonPath'
import PsychicApplication from '../psychic-application'
import { HttpMethod, HttpMethods } from '../router/types'
import PsychicServer from '../server'
import { DEFAULT_OPENAPI_COMPONENT_RESPONSES, DEFAULT_OPENAPI_COMPONENT_SCHEMAS } from './defaults'
import { OpenapiEndpointResponsePath, OpenapiParameterResponse, OpenapiSchema } from './endpoint'

export default class OpenapiAppRenderer {
  /**
   * @internal
   *
   * reads the lates openapi builds using buildOpenapiObject, and syncs
   * the contents to the openapi.json file at the project root.
   */
  public static async sync() {
    const openapiContents = await OpenapiAppRenderer.toObject()

    const psychicApp = PsychicApplication.getOrFail()
    for (const key in psychicApp.openapi) {
      const jsonPath = openapiJsonPath(key)
      await fs.writeFile(jsonPath, JSON.stringify(openapiContents[key], null, 2), {
        flag: 'w+',
      })
    }
  }

  /**
   * @internal
   *
   * builds a new typescript object which contains the combined
   * payloads of all `@Openapi` decorator calls used throughout
   * the controller layer.
   */
  public static async toObject(): Promise<Record<string, OpenapiSchema>> {
    const psychicApp = PsychicApplication.getOrFail()

    const output: Record<string, OpenapiSchema> = {}
    for (const key in psychicApp.openapi) {
      output[key] = await this._toObject(key)
    }

    return output
  }

  public static async _toObject(openapiName: string): Promise<OpenapiSchema> {
    const processedSchemas: Record<string, boolean> = {}
    const psychicApp = PsychicApplication.getOrFail()
    const controllers = psychicApp.controllers
    const packageJsonPath = path.join(psychicApp.apiRoot, 'package.json')

    const server = new PsychicServer()
    await server.boot()
    const routes = await server.routes()

    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    const packageJson = (await import(packageJsonPath)).default as {
      version: string
      name: string
      description?: string
    }

    const finalOutput: OpenapiSchema = {
      openapi: '3.0.2',
      info: {
        version: packageJson.version,
        title: packageJson.name,
        description: packageJson.description || 'The autogenerated openapi spec for your app',
      },
      paths: {},
      components: {
        ...(psychicApp.openapi?.[openapiName]?.defaults?.components || {}),
        schemas: {
          ...DEFAULT_OPENAPI_COMPONENT_SCHEMAS,
          ...((psychicApp.openapi?.[openapiName]?.defaults?.components?.schemas ||
            {}) as typeof DEFAULT_OPENAPI_COMPONENT_SCHEMAS),
        },
        responses: {
          ...DEFAULT_OPENAPI_COMPONENT_RESPONSES,
          ...(psychicApp.openapi?.[openapiName]?.defaults?.components?.responses || {}),
        },
      },
    }

    if (psychicApp.openapi?.[openapiName]?.defaults?.securitySchemes) {
      finalOutput.components = {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment
        securitySchemes: psychicApp.openapi?.[openapiName].defaults.securitySchemes as any,
        ...finalOutput.components,
      }
    }

    if (psychicApp.openapi?.[openapiName]?.defaults?.security) {
      finalOutput.security = psychicApp.openapi?.[openapiName].defaults.security
    }

    for (const [controllerName, controller] of Object.entries(controllers).filter(
      ([, controller]) => controller.openapiName === openapiName,
    )) {
      for (const key of Object.keys(controller.openapi || {})) {
        if (EnvInternal.isDebug) console.log(`Processing OpenAPI key ${key} for controller ${controllerName}`)

        const renderer = controller.openapi[key]

        finalOutput.components.schemas = {
          ...finalOutput.components.schemas,
          ...renderer.toSchemaObject(processedSchemas),
        }

        const endpointPayload = renderer.toPathObject(processedSchemas, routes)
        const path = Object.keys(endpointPayload)[0]

        const method = (Object.keys(endpointPayload[path]) as HttpMethod[]).find(key =>
          HttpMethods.includes(key),
        )!

        if (!finalOutput.paths[path]) {
          finalOutput.paths[path] = { parameters: [] } as unknown as OpenapiEndpointResponsePath
        }

        const pathObj = finalOutput.paths[path]
        const otherPathObj = endpointPayload[path]

        pathObj[method] = otherPathObj[method]

        pathObj.parameters = this.combineParameters([
          ...pathObj.parameters,
          ...endpointPayload[path].parameters,
        ])
      }
    }

    return this.sortedSchemaPayload(finalOutput)
  }

  private static combineParameters(parameters: OpenapiParameterResponse[]) {
    const groupedParams = groupBy(parameters, 'name')

    const result = Object.keys(groupedParams).map(paramName => {
      const identicalParams = groupedParams[paramName]
      return identicalParams.reduce((compositeParam, param) => {
        compositeParam.description ||= param.description

        if (compositeParam.allowEmptyValue !== undefined)
          compositeParam.allowEmptyValue = param.allowEmptyValue

        if (compositeParam.allowReserved !== undefined) compositeParam.allowReserved = param.allowReserved

        if (compositeParam.required !== undefined) compositeParam.required = param.required

        return compositeParam
      }, identicalParams[0])
    })

    return result
  }

  private static sortedSchemaPayload(schema: OpenapiSchema) {
    const sortedPaths = Object.keys(schema.paths).sort()
    const sortedSchemas = Object.keys(schema.components.schemas).sort()

    const sortedSchema: typeof schema = { ...schema }
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    sortedSchema.paths = sortedPaths.reduce((agg, path) => {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      agg[path] = schema.paths[path]

      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      return agg
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }, {} as any)

    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    sortedSchema.components.schemas = sortedSchemas.reduce((agg, key) => {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      agg[key] = schema.components.schemas[key]

      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      return agg
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }, {} as any)

    return sortedSchema
  }
}
